import matplotlib.pyplot as plt
import numpy as np

'''DEFINE THE FIGURE AND DOMAIN'''
import matplotlib as mpl
mpl.rcParams.update(mpl.rcParamsDefault)

import pickle
import os.path
import json 
patterns = [ "\\" , "/", ""]
bar_colors = ['tab:blue', 'mediumseagreen', 'tab:orange']
noiselist=['noiseless', "bit-flip", "FakeManila"]
aavqelist=[13,8, 0]
vqsdlist=[16, 4, 0]
vqlslist=[5, 5, 0]
qabomlist=[8, 8, 4]


def FIGURE1(nmodels, qubits,vqaname='AAVQE', ifsave=False):
    fig, ax=plt.subplots(layout='constrained')
    ax.bar(nmodels,qubits,   color=bar_colors, hatch=patterns)
    ax.set_ylabel('Qubits')
    ax.set_xlabel('Noise models')
    plt.title(vqaname+' largest instances')

    if ifsave==True:
        filename=vqaname+'_max_implementation.pdf'
        SAVE_PLOT(filename)
    else:
        plt.show()

def FIGURE2(n,cfvals, exactval=0, vqaname='AAVQE', witherror=False, ifsave=False):
    itererror=exactval*np.ones(len(n))-cfvals
    
    fig, ax=plt.subplots(layout='constrained')
    ax.plot(n, cfvals, label=r'$C(\theta_j)$', color=bar_colors[0])
    if witherror==True:
        ax.plot(n, itererror, label=r'Error in $C(\theta_j)$', linestyle='dashed', color=bar_colors[1])
        plt.axhline(y=exactval,xmin=0,xmax=3,c=bar_colors[2],linewidth=1,zorder=0, label=r"$C(\theta_{ideal})$")
    ax.set_ylabel(r'Cost function $C(\theta_j)$')
    ax.set_xlabel(vqaname+' iteration step j')
    ax.legend()
    plt.title(vqaname+' convergence with FakeManila noise')
    if ifsave==True:
        filename=vqaname+'_fakemanila_convergence.pdf'
        SAVE_PLOT(filename)
    else:
        plt.show()

def SAVE_PLOT(filename, dev='mac'):
    script_path = os.path.abspath(__file__)
    if dev=='mac':
        save_path=script_path.replace(".py", "")
    else:
        save_path=script_path.replace(".py", "")
    completename = os.path.join(save_path, filename) 
    
    plt.savefig(completename)
    return

#FIGURE1(noiselist, aavqelist,vqaname='AAVQE', ifsave=True)

def RUN_FIGURE2_AAVQE(ifsave=True):
    vqaname='AAVQE'
    numpoints=np.linspace(-1, -0.1428571428571428, 4)
    filename='AAVQE_w_FakeManila_0XX101_'+str(numpoints[0])+'_instance.pkl'
    with open(filename,'rb') as file:
        DATA=pickle.load(file)
   
    #print(DATA['Nsdata'].keys())
    #print()
    cfvals=DATA['Nsdata']['fullenergy']
    num_its=DATA['Nsdata']['fulln']
    n=np.linspace(0, num_its-1, num_its)
    print(np.diff(cfvals)[-1])

    FIGURE2(n,cfvals, exactval=DATA['gsE'], vqaname='AAVQE', witherror=True, ifsave=ifsave)
    return

#RUN_FIGURE2_AAVQE(ifsave=False)
def RUN_FIGURE2_VQLS(ifsave=True):
    vqaname='VQLS'
    f=open('benchmarking_data.json')
    data=json.load(f)
    cfvals=data["FakeManila"]['cost_history']
    
    num_its=len(cfvals)
    n=np.linspace(0, num_its-1, num_its)
    
    fig, ax=plt.subplots(layout='constrained')
    ax.plot(n, cfvals, label=r'$C(\theta_j)$', color=bar_colors[0])
    #ax.plot(n, data["FakeManila"]['error_history'], label=r'Error in $C(\theta_j)$', linestyle='dashed', color=bar_colors[1])
    ax.set_ylabel(r'Cost function $C(\theta_j)$')
    ax.set_xlabel(vqaname+' iteration step j')
    ax.set_ylim([-0.01, 0.1])
    ax.legend()
    plt.title(vqaname+' convergence with FakeManila noise')
    if ifsave==True:
        filename=vqaname+'_fakemanila_convergence.pdf'
        SAVE_PLOT(filename)
    else:
        plt.show()

RUN_FIGURE2_VQLS(ifsave=True)

def RUN_FIGURE2_VQSD(ifsave=True):
    f=open('VQSD_2_FakeManila_2.json')
    data=json.load(f)
    
    num_its=data['Iterations to Solution']
    cfvals=data['cost_history']
    
    n=np.linspace(0, num_its+2, num_its+2)
    erflist=[0.5700000000000001, 0.53, 0.55, 0.53, 0.54, 0.5700000000000001, 0.49, 0.53, 0.49, 0.48, 0.5, 0.42000000000000004, 0.5, 0.44999999999999996, 0.49, 0.47, 0.51, 0.42000000000000004, 0.45999999999999996, 0.42000000000000004, 0.41000000000000003, 0.44999999999999996, 0.49, 0.45999999999999996, 0.41000000000000003, 0.48, 0.39, 0.39, 0.48, 0.44999999999999996, 0.4, 0.38, 0.36, 0.21999999999999997, 0.45999999999999996, 0.26, 0.31000000000000005, 0.26, 0.30000000000000004, 0.21999999999999997, 0.25, 0.19999999999999996, 0.24, 0.15000000000000002, 0.20999999999999996, 0.10999999999999999, 0.06999999999999995, 0.040000000000000036, 0.06000000000000005, 0.06000000000000005, 0.010000000000000009, 0.0]
    print(type(erflist))
    print(type(erflist[0]))
    fig, ax=plt.subplots(layout='constrained')
    ax.plot(n, cfvals, label=r'$C(\theta_j)$', color=bar_colors[0])
    ax.plot(np.linspace(0, num_its+1, num_its+1), erflist, label=r'Error in $C(\theta_j)$', linestyle='dashed', color=bar_colors[1])
    ax.set_ylabel(r'Cost function $C(\theta_j)$')
    ax.set_xlabel('VQSD'+' iteration step j')
    ax.legend()
    plt.title('VQSD'+' convergence with FakeManila noise')
    if ifsave==True:
        filename='VQSD'+'_fakemanila_convergence.pdf'
        SAVE_PLOT(filename)
    else:
        plt.show()

#RUN_FIGURE2_VQSD(ifsave=True)

def RUN_FIGURE2_QABoM(ifsave=False):
    ####get the helliger distance which is the global cost function###
    ##for now, I just copied the first array from the hellinger_results1.txt file
    cfvals=[
    1.619021250404042,
    1.6133568450648947,
    1.6075907749886749,
    1.6017458473966781,
    1.595704881114486,
    1.589518522766276,
    1.5831834977110781,
    1.5767215948981115,
    1.5701049952501172,
    1.563325329770663,
    1.5562135865518594,
    1.5490080139728128,
    1.541691889118151,
    1.5341179062242556,
    1.5264008599667789,
    1.5184931012875542,
    1.5103760240432595,
    1.5021306598283028,
    1.493620231140794,
    1.4849146889229243,
    1.476005867620555,
    1.4669303689473012,
    1.4576461429024044,
    1.4481501991238606,
    1.438380220348182,
    1.4284461364467023,
    1.418267410944018,
    1.4079250169455466,
    1.397393242776483,
    1.3865284403388225,
    1.3754740106211896,
    1.364204758796412,
    1.3526808490246296,
    1.3409788019057245,
    1.3289392382405076,
    1.3167294897340724,
    1.3042593781849359,
    1.2915676261836044,
    1.2785745418689527,
    1.2654519727742748,
    1.2521321015072162,
    1.2385614028736778,
    1.2247802897803877,
    1.2107135449727184,
    1.1964484520020402,
    1.1819992250559115,
    1.1673304042230863,
    1.1524527040109924,
    1.1373864650289969,
    1.1221704015642908,
    1.106830163310564,
    1.0912598662400341,
    1.0755475700992903,
    1.0597461695082906,
    1.0437500415137382,
    1.0276300247233339,
    1.0113850163288027,
    0.9950810288324574,
    0.9786887747485276,
    0.9621926254080416,
    0.9456462595652685,
    0.9290154178582215,
    0.9124004289650764,
    0.8957561670485333,
    0.8791461339692558,
    0.8624933446916555,
    0.8458833214752834,
    0.8293220908636619,
    0.812780124349307,
    0.7963002626886042,
    0.7799132962704933,
    0.7636113512053613,
    0.7474141026165645,
    0.7312944964253897,
    0.7153241881894978,
    0.6995232453570891,
    0.6838112704311847,
    0.6682929362288945,
    0.6529437435285167,
    0.6377438476576578,
    0.6227922902130953,
    0.6080070626694939,
    0.5934273933972624,
    0.5790787705281234,
    0.5649294120043092,
    0.550988419422329,
    0.5372690757864432,
    0.5237736036575612,
    0.5105445268975898,
    0.49753624038044064,
    0.484763840185007,
    0.4722363728089548,
    0.4599421819887847,
    0.4478872956079705,
    0.4360727175966168,
    0.42453124306904827,
    0.41318993254970965,
    0.4021356228065856,
    0.3913045476373133,
    0.38071498882493415,
    0.37038126226203233,
    0.36029162836498163,
    0.35044003396400564,
    0.34081890810213494,
    0.3314162016811178,
    0.32226556222398856,
    0.3133258534986036,
    0.3046197951842189,
    0.29611021749097444,
    0.2878369224204963,
    0.2797486856621158,
    0.271872732259693,
    0.2642163946310149,
    0.25675592625826615,
    0.2494985892807134,
    0.24240231373950585,
    0.23550671546934349,
    0.2288201316599201,
    0.22229022400076878,
    0.21593901393121442,
    0.2097643889117928,
    0.20375613053295877,
    0.197925864591533,
    0.19224244478774666,
    0.1867122301339972,
    0.18133701577755187,
    0.17611032632832538,
    0.17102686847132695,
    0.16608804870701094,
    0.16129319757538865,
    0.15664059615059128,
    0.15211428914010777,
    0.14771199298524498,
    0.14344046038585906,
    0.13928570661283973,
    0.1352494972962648,
    0.13132352130990096,
    0.12751130488879142,
    0.1238157033933952,
    0.12022665309504664,
    0.11673323028476523,
    0.11333930992313453,
    0.11004273333104188,
    0.106848112057098,
    0.10373551082058,
    0.1007101041490662,
    0.097782958529116,
    0.09493309161915525,
    0.09216414975862665,
    0.0894774326860276,
    0.08686583726316997,
    0.08433438849016968,
    0.08188175191563275,
    0.07949296058992177,
    0.07718168000230229,
    0.07492401952254042,
    0.07273733310477254,
    0.07061170010584779,
    0.06854685736134614,
    0.06654469555438906,
    0.06460105790293788,
    0.06271241143434574,
    0.06087964426447859,
    0.05910340422693779,
    0.05737459795253243,
    0.05569618578980984,
    0.054067769145335585,
    0.0524870736162554,
    0.050950716177346284,
    0.0494637944205612,
    0.048015936020077414,
    0.04661285837162937,
    0.04524494421854232,
    0.043921160669197996,
    0.042636446554065344,
    0.04138964341534868,
    0.04017943078863755,
    0.039006067580867367,
    0.03786673063701673,
    0.036759187144281905,
    0.035683643308025564,
    0.0346410490164808,
    0.033627072722975736,
    0.032643538138799034,
    0.03168951167613986,
    0.030762887263230964,
    0.02986376853558723,
    0.028988639585546684,
    0.0281407815125477,
    0.02731743421717613,
    0.026518287173875124,
    0.02574187282339579,
    0.024988662911995675,
    0.024257714449687665,
    0.023545834608749438,
    0.02285740050471869,
    0.022189733870383012,
    0.02154050802705814,
    0.020910370050381624,
    0.020298954773644125,
    0.01970531322879653,
    0.019128465242232703,
    0.018568134630888272,
    0.01802561999845916,
    0.01749929265232067,
    0.01698725024063162,
    0.016490749657957795,
    0.016008678409870882,
    0.015539936903978065,
    0.015086242728851812,
    0.014644432525195808,
    0.01421583574958835,
    0.013799780006041339,
    0.013396029378245643,
    0.013003327450819838,
    0.01262324485368816,
    0.012253432431642555,
    0.011893639333191878,
    0.011545536562566605,
    0.011208113156715629,
    0.010880337294755004,
    0.010561991174889486,
    0.010252758158415039,
    0.009953209606908257,
    0.009661515511544625,
    0.009378918646825092,
    0.009105120386805231,
    0.008838925975590257,
    0.008580471405678117,
    0.00832880087282896,
    0.008085024644756762,
    0.007848344708938648,
    0.007618555663221436,
    0.007395530235232608,
    0.007178787903555037,
    0.006968907737002772,
    0.006765097282081149,
    0.0065672471167762675,
    0.006374622670408624,
    0.006188010432748276,
    0.0060069782294696,
    0.005831128090538344,
    0.005660508576180731,
    0.005495122720292623,
    0.005334360494390324,
    0.005178048458134354,
    0.005026218514628089,
    0.004879221560667351,
    0.00473656983239204,
    0.004598245817388883,
    0.004463481746516099,
    0.0043325614436390625,
    0.004205830246391427,
    0.004082905657187845,
    0.003963089941197897,
    0.0038470344314746443,
    0.003734377449857578,
    0.003625161084359149,
    0.003519018558200165,
    0.0034160504997239574,
    0.0033159009994536263,
    0.0032187504474520162,
    0.0031246140402707598,
    0.0030330530196898196,
    0.0029441606233982084,
    0.002858026955383682,
    0.002774535097035977,
    0.0026933902151966152,
    0.002614618502749741,
    0.0025379522702709523,
    0.002463558099352227,
    0.0023914146666486513,
    0.00232144056212172,
    0.0022535249302052178,
    0.0021875428073478294,
    0.0021235237055884644,
    0.0020613881986889133,
    0.00200113920093428,
    0.001942451929468929,
    0.0018855594219616284,
    0.0018303064225554536,
    0.0017767939656621388,
    0.0017247955092583283,
    0.0016743269753415441,
    0.0016253193038259076,
    0.001577661346512143
]
    ###infer the number of iterations, beginning the count at the 0th iteration###
    num_its=len(cfvals)
    n=np.linspace(0, num_its-1, num_its)

    ###Since the Hellinger distance is used as a cost function, the 'ideal' cost function value is 0
    FIGURE2(n, cfvals, exactval=0, vqaname='QABoM', ifsave=ifsave)
    return

#RUN_FIGURE2_QABoM(ifsave=True)


